warning: in the working copy of 'data_management/display.py', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/data_management/display.py b/data_management/display.py[m
[1mindex c2b592a..5072711 100644[m
[1m--- a/data_management/display.py[m
[1m+++ b/data_management/display.py[m
[36m@@ -1,58 +1,139 @@[m
[31m-import vtk[m
 import numpy as np[m
 import tkinter as tk[m
[31m-from vtk.util.numpy_support import numpy_to_vtk[m
[32m+[m[32mfrom tkinter import messagebox, filedialog[m
 import matplotlib.pyplot as plt[m
 from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg[m
[32m+[m[32mimport cv2[m
[32m+[m[32mimport vtk[m
[32m+[m[32mfrom vtk.util.numpy_support import numpy_to_vtk[m
[32m+[m[32mfrom image_processing.image_loader import ImageLoader[m
[32m+[m[32mfrom contouring.contour_tools import ContourTools[m
[32m+[m[32mimport os[m
[32m+[m[32mimport tempfile[m
[32m+[m[32mfrom PIL import Image[m
[32m+[m[32mimport json[m
 [m
 class Display:[m
     def __init__(self, root, patient_id, db):[m
[32m+[m[32m        """Kh·ªüi t·∫°o display interface"""[m
         self.root = root[m
         self.patient_id = patient_id[m
         self.db = db[m
         [m
[31m-        # L·∫•y d·ªØ li·ªáu volume t·ª´ c∆° s·ªü d·ªØ li·ªáu[m
[31m-        volume_data = self.db.get_volume(self.patient_id, 'CT')[m
[31m-        if volume_data is not None and len(volume_data) == 2:[m
[31m-            self.volume, self.metadata = volume_data[m
[31m-        else:[m
[31m-            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu volume[m
[31m-            print(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu CT cho b·ªánh nh√¢n {patient_id}")[m
[31m-            self.volume = np.zeros((10, 10, 10), dtype=np.float32)  # T·∫°o volume r·ªóng[m
[31m-            self.metadata = None[m
[31m-            [m
[31m-        self.current_slice = self.volume.shape[0] // 2[m
[31m-[m
[31m-        # T·∫°o giao di·ªán Tkinter[m
[31m-        self.fig_frame = tk.Frame(self.root)[m
[31m-        self.fig_frame.pack(fill=tk.BOTH, expand=True)[m
[31m-[m
[31m-        # Hi·ªÉn th·ªã 2D b·∫±ng matplotlib[m
[31m-        self.fig_2d = plt.Figure(figsize=(9, 6))[m
[31m-        self.canvas_2d = FigureCanvasTkAgg(self.fig_2d, master=self.fig_frame)[m
[31m-        self.canvas_2d.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH, expand=True)[m
[31m-        self.canvas_2d.mpl_connect('scroll_event', self.on_scroll)[m
[31m-[m
[31m-        # Hi·ªÉn th·ªã 3D b·∫±ng VTK[m
[31m-        self.vtk_frame = tk.Frame(self.root)[m
[31m-        self.vtk_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)[m
[32m+[m[32m        # Kh·ªüi t·∫°o c√°c bi·∫øn d·ªØ li·ªáu[m
[32m+[m[32m        self.volume = None  # D·ªØ li·ªáu CT ho·∫∑c MRI[m
[32m+[m[32m        self.ct_volume = None  # D·ªØ li·ªáu CT[m
[32m+[m[32m        self.rt_structs = {}  # D·ªØ li·ªáu contour[m
[32m+[m[32m        self.rt_dose = None  # D·ªØ li·ªáu li·ªÅu[m
[32m+[m[32m        self.rt_plan = None  # D·ªØ li·ªáu k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã[m
[32m+[m[32m        self.metadata = None  # Metadata c·ªßa ·∫£nh[m
[32m+[m[32m        self.current_slice = 0  # Ch·ªâ s·ªë slice hi·ªán t·∫°i[m
[32m+[m[32m        self.slice_positions = []  # V·ªã tr√≠ c√°c slice[m
[32m+[m[32m        self.current_view = 'axial'  # View hi·ªán t·∫°i (axial, coronal, sagittal)[m
[32m+[m[41m        [m
[32m+[m[32m        # Kh·ªüi t·∫°o c√°c bi·∫øn UI[m
[32m+[m[32m        self.fig_2d = None  # Figure matplotlib 2D[m
[32m+[m[32m        self.canvas_2d = None  # Canvas matplotlib 2D[m
[32m+[m[32m        self.canvas = None  # Canvas tkinter (cho ƒëo g√≥c)[m
[32m+[m[32m        self.ax_axial = None  # Tr·ª•c axial[m
[32m+[m[32m        self.ax_coronal = None  # Tr·ª•c coronal[m
[32m+[m[32m        self.ax_sagittal = None  # Tr·ª•c sagittal[m
[32m+[m[41m        [m
[32m+[m[32m        # Kh·ªüi t·∫°o VTK[m
[32m+[m[32m        self.vtk_data = None  # D·ªØ li·ªáu vtk[m
[32m+[m[32m        self.ren = None  # VTK renderer[m
[32m+[m[32m        self.ren_win = None  # VTK render window[m
[32m+[m[32m        self.iren = None  # VTK interactor[m
[32m+[m[32m        self.volume_actor = None  # VTK volume actor[m
[32m+[m[32m        self.structure_actors = {}  # VTK actors cho c√°c c·∫•u tr√∫c[m
[32m+[m[41m        [m
[32m+[m[32m        # T·∫£i d·ªØ li·ªáu b·ªánh nh√¢n[m
[32m+[m[32m        self.load_patient_data(patient_id)[m
[32m+[m[41m        [m
[32m+[m[32m        # Kh·ªüi t·∫°o UI[m
[32m+[m[32m        self.init_ui()[m
[32m+[m[32m        # Kh·ªüi t·∫°o VTK[m
         self.init_vtk()[m
[31m-[m
[31m-        # Hi·ªÉn th·ªã giao di·ªán ban ƒë·∫ßu[m
[32m+[m[41m        [m
[32m+[m[32m    def init_ui(self):[m
[32m+[m[32m        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng"""[m
[32m+[m[32m        # Frame ch√≠nh[m
[32m+[m[32m        self.main_frame = tk.Frame(self.root)[m
[32m+[m[32m        self.main_frame.pack(fill=tk.BOTH, expand=True)[m
[32m+[m[41m        [m
[32m+[m[32m        # Frame b√™n tr√°i ch·ª©a c√°c ch·ª©c nƒÉng[m
[32m+[m[32m        self.left_frame = tk.Frame(self.main_frame, width=200)[m
[32m+[m[32m        self.left_frame.pack(side=tk.LEFT, fill=tk.Y)[m
[32m+[m[41m        [m
[32m+[m[32m        # Frame b√™n ph·∫£i ch·ª©a hi·ªÉn th·ªã h√¨nh ·∫£nh[m
[32m+[m[32m        self.right_frame = tk.Frame(self.main_frame)[m
[32m+[m[32m        self.right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)[m
[32m+[m[41m        [m
[32m+[m[32m        # Frame hi·ªÉn th·ªã 2D[m
[32m+[m[32m        self.frame_2d = tk.Frame(self.right_frame)[m
[32m+[m[32m        self.frame_2d.pack(side=tk.TOP, fill=tk.BOTH, expand=True)[m
[32m+[m[41m        [m
[32m+[m[32m        # Frame hi·ªÉn th·ªã 3D[m
[32m+[m[32m        self.frame_3d = tk.Frame(self.right_frame)[m
[32m+[m[32m        self.frame_3d.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)[m
[32m+[m[41m        [m
[32m+[m[32m        # T·∫°o figure cho hi·ªÉn th·ªã 2D[m
[32m+[m[32m        self.fig_2d = plt.Figure(figsize=(8, 8), dpi=100)[m
[32m+[m[32m        self.canvas_2d = FigureCanvasTkAgg(self.fig_2d, self.frame_2d)[m
[32m+[m[32m        self.canvas_2d.get_tk_widget().pack(fill=tk.BOTH, expand=True)[m
[32m+[m[41m        [m
[32m+[m[32m        # T·∫°o 3 axes cho 3 view: axial, coronal, sagittal[m
[32m+[m[32m        gs = self.fig_2d.add_gridspec(2, 2)[m
[32m+[m[32m        self.ax_axial = self.fig_2d.add_subplot(gs[0, 0])[m
[32m+[m[32m        self.ax_coronal = self.fig_2d.add_subplot(gs[0, 1])[m
[32m+[m[32m        self.ax_sagittal = self.fig_2d.add_subplot(gs[1, 0])[m
[32m+[m[41m        [m
[32m+[m[32m        # Canvas tkinter cho c√°c thao t√°c ƒëo g√≥c[m
[32m+[m[32m        self.canvas = tk.Canvas(self.frame_2d, width=800, height=800, bg='black')[m
[32m+[m[41m        [m
[32m+[m[32m        # Frame th√¥ng tin & ƒëi·ªÅu khi·ªÉn[m
[32m+[m[32m        self.info_frame = tk.Frame(self.left_frame)[m
[32m+[m[32m        self.info_frame.pack(fill=tk.X, pady=10)[m
[32m+[m[41m        [m
[32m+[m[32m        # Th√™m nh√£n v√† c√°c c√¥ng c·ª• ƒëi·ªÅu khi·ªÉn[m
[32m+[m[32m        tk.Label(self.info_frame, text=f"B·ªánh nh√¢n: {self.patient_id}").pack(anchor='w')[m
[32m+[m[41m        [m
[32m+[m[32m        # C√°c c√¥ng c·ª• thay ƒë·ªïi window/level[m
[32m+[m[32m        self.wl_frame = tk.Frame(self.left_frame)[m
[32m+[m[32m        self.wl_frame.pack(fill=tk.X, pady=5)[m
[32m+[m[41m        [m
[32m+[m[32m        tk.Label(self.wl_frame, text="Window:").grid(row=0, column=0)[m
[32m+[m[32m        self.window_scale = tk.Scale(self.wl_frame, from_=1, to=4000, orient=tk.HORIZONTAL)[m
[32m+[m[32m        self.window_scale.set(400)[m
[32m+[m[32m        self.window_scale.grid(row=0, column=1)[m
[32m+[m[41m        [m
[32m+[m[32m        tk.Label(self.wl_frame, text="Level:").grid(row=1, column=0)[m
[32m+[m[32m        self.level_scale = tk.Scale(self.wl_frame